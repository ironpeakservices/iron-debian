
on: pull_request
name: pull request checks
jobs:
  dockerfilelint:
    name: dockerfile lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.2
    - name: hadolint
      uses: burdzwastaken/hadolint-action@1.9.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HADOLINT_ACTION_DOCKERFILE_FOLDER: .
  
  dockerbuild:
    name: docker build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.2
    - name: extract tag
      id: vars
      run: echo ::set-output name=debian_version::$(grep '^FROM debian' Dockerfile  | cut -d ' ' -f 2 | cut -d ':' -f 2)
    - name: Build docker image
      run: |
        docker build . --file Dockerfile --tag image:${{ steps.vars.outputs.debian_version }}
        docker save --output image.tar image:${{ steps.vars.outputs.debian_version }}
    - name: Squash docker image
      run: |
        wget https://github.com/jwilder/docker-squash/releases/download/v0.2.0/docker-squash-linux-amd64-v0.2.0.tar.gz
        tar -C . -xzvf docker-squash-linux-amd64-v0.2.0.tar.gz
        mkdir -p image/
        sudo ./docker-squash -i image.tar -t image:${{ steps.vars.outputs.debian_version }} -verbose -o image/image.tar
        rm image.tar
    - name: cache docker image
      uses: actions/cache@v2
      with:
        path: image/
        key: ${{ runner.os }}-docker-${{ github.sha }}

  dockerscan:
    name: docker security scan
    runs-on: ubuntu-latest
    needs: dockerbuild
    steps:
    - uses: actions/checkout@v2.3.2
    - name: extract tag
      id: vars
      run: echo ::set-output name=debian_version::$(grep '^FROM debian' Dockerfile  | cut -d ' ' -f 2 | cut -d ':' -f 2)
    - name: load cached docker image
      uses: actions/cache@v2
      with:
        path: image/
        key: ${{ runner.os }}-docker-${{ github.sha }}
    - name: load cached docker container
      run: docker load -i image/image.tar
    - name: cached scan db
      uses: actions/cache@v2
      with:
        path: vulndb/
        key: trivy-vulndb
    - name: Install Trivy
      run:  |
        trivyRelease="$(curl -s "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | cut -d 'v' -f 2)"
        wget https://github.com/aquasecurity/trivy/releases/download/v${trivyRelease}/trivy_${trivyRelease}_Linux-64bit.tar.gz
        tar zxvf trivy_${trivyRelease}_Linux-64bit.tar.gz
    - name: Scan
      run: ./trivy --exit-code 1 --no-progress --severity HIGH,CRITICAL,MEDIUM --cache-dir vulndb/ image:${{ steps.vars.outputs.debian_version }}

  approve:
    name: Dependabot PR Auto-approve
    if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
    runs-on: ubuntu-latest
    steps:
    - uses: hmarr/auto-approve-action@v2.0.0
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
